import com.modrinth.minotaur.TaskModrinthUpload

plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id 'com.matthewprenger.cursegradle'
    id "com.modrinth.minotaur"
    // Dokka docs
    id "org.jetbrains.kotlin.jvm"
    id("org.jetbrains.dokka")
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

loom {
    forge {
        mixinConfigs "taterzens.common.mixins.json"
    }
}

def ENV = System.getenv();

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    // Libs
    //modImplementation("c2b/config2brigadier-forge.jar")
    //shadowCommon("c2b/config2brigadier-forge.jar") { transitive false }

    modImplementation("com.github.samolego:forgified-sgui:${project.fsgui_version}")
    shadowCommon("com.github.samolego:forgified-sgui:${project.fsgui_version}") { transitive false }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "c2b_version", rootProject.c2b_version
    inputs.property "sgui_version", project.fsgui_version

    filesMatching("META-INF/mods.toml") {
        expand("version": project.version,
                "c2b_version": rootProject.c2b_version,
                "sgui_version": project.fsgui_version
        )
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }

        mavenJava(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/samolego/Taterzens")
            credentials {
                username = ENV.USERNAME
                password = ENV.PASSWORD
            }
        }
        // uncomment to publish to the local maven
        mavenLocal()
    }

}

tasks.withType(dokkaHtmlPartial.getClass()).configureEach {
    pluginsMapConfiguration.set(
            ["org.jetbrains.dokka.base.DokkaBase": """{ "separateInheritedMembers": true}"""]
    )
}

curseforge {
    if (ENV.CURSEFORGE_API_KEY) {
        apiKey = ENV.CURSEFORGE_API_KEY
    }

    project {
        id = "473071"
        changelog = ENV.CHANGELOG ?: "A changelog can be found at https://github.com/samolego/Taterzens/releases/tag/${version}"
        releaseType = "release"
        addGameVersion "${project.minecraft_version}"
        addGameVersion "Forge"

        mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}-forge.jar")) {
            displayName = "[${project.minecraft_version}] Taterzens ${version}"
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

task modrinth(type: TaskModrinthUpload, dependsOn: remapJar) {
    onlyIf {
        ENV.MODRINTH_TOKEN
    }

    token = ENV.MODRINTH_TOKEN
    projectId = "vE972Kux"
    versionNumber = project.minecraft_version + "+" + version + "-forge"
    changelog = ENV.CHANGELOG ?: "A changelog can be found at https://github.com/samolego/Taterzens/releases/tag/${version}"
    versionName = "[${project.minecraft_version}] Taterzens ${version} [Forge]"
    releaseType = "release"

    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}-forge.jar")

    addGameVersion("${project.minecraft_version}")
    addLoader('forge')
}